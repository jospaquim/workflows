{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "OpenWeatherMap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenWeatherMap": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Image": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Function1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function1": {
      "main": [
        [
          {
            "node": "Edit Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-01-08T21:49:26.252Z",
  "id": "7",
  "name": "Generar imagen climática",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        460,
        460
      ],
      "id": "cf54629e-edb5-4092-a1a8-fe61a0efa334"
    },
    {
      "parameters": {
        "path": "weatherInfo",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        460,
        620
      ],
      "webhookId": "40c33c20-3f0b-4712-8492-11ff5eca8e1c",
      "id": "76a5839b-e68d-486a-9089-564d586070f5"
    },
    {
      "parameters": {
        "url": "=http://ip-api.com/json/{{$json[\"headers\"][\"x-forwarded-for\"]}}",
        "options": {}
      },
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        680,
        620
      ],
      "id": "27df9546-ca2f-4ffe-85a3-c99e0e7a39a3"
    },
    {
      "parameters": {
        "locationSelection": "coordinates",
        "latitude": "={{$json[\"lat\"]}}",
        "longitude": "={{$json[\"lon\"]}}",
        "language": "={{$json[\"countryCode\"].toLowerCase()}}"
      },
      "name": "OpenWeatherMap",
      "type": "n8n-nodes-base.openWeatherMap",
      "typeVersion": 1,
      "position": [
        900,
        620
      ],
      "id": "bb470669-2a67-4a25-9268-a2cd37b05bef",
      "credentials": {
        "openWeatherMapApi": {
          "id": "33",
          "name": "OpenWeatherMap account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "inputFieldName": "weather",
        "options": {}
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1880,
        860
      ],
      "id": "b55ca8e8-402d-4c71-a545-7887e94ab431"
    },
    {
      "parameters": {
        "functionCode": "const moment = require(\"moment\")\n\nreturn items.map(item => {\n  item.json.discord = {\n    \"username\": \"Openweather (\" + item.json.name + \")\",\n    \"avatar_url\": \"https://openweathermap.org/img/wn/\" + item.json.weather[0].icon +\"@2x.png\",\n    \"embeds\": [\n      {\n        \"fields\": [\n          {\n            \"name\": \"Longitude\",\n            \"value\": item.json.coord.lon.toString(),\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Latitude\",\n            \"value\": item.json.coord.lat.toString(),\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Weather - \" + item.json.weather[0].main,\n            \"value\": item.json.weather[0].description,\n          },\n          {\n            \"name\": \"Temperature\",\n            \"value\": item.json.main.temp.toString() + \"°C\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Temperature (feel like)\",\n            \"value\": item.json.main.feels_like.toString() + \"°C\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Temperature (min / max)\",\n            \"value\": item.json.main.temp_min.toString() + \"°C\" + \" / \" + item.json.main.temp_max.toString() + \"°C\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Pressure\",\n            \"value\": item.json.main.pressure.toString() + \"hPa\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Humidity\",\n            \"value\": item.json.main.humidity.toString() + \"%\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Wind (speed / direction[°] / gust)\",\n            \"value\": item.json.wind.speed.toString() + \"m per sec. / \" + item.json.wind.deg.toString() + \"° / \" + item.json.wind.gust.toString() + \"m per sec.\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Place\",\n            \"value\": item.json.name + \" at \" + getCountryName(item.json.sys.country) + \" \" + getFlagEmoji(item.json.sys.country),\n          },\n          {\n            \"name\": \"Time\",\n            \"value\": moment.unix(item.json.dt).add(item.json.timezone, \"s\").format('lll') + \" UTC\" + (item.json.timezone >= 0 ? \"+\" : \"-\") + (item.json.timezone).toString() / 3600 + \"H\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Sunset\",\n            \"value\": moment.unix(item.json.sys.sunset).add(item.json.timezone, \"s\").format('lll') + \" UTC\" + (item.json.timezone >= 0 ? \"+\" : \"-\") + (item.json.timezone).toString() / 3600 + \"H\",\n            \"inline\": true,\n          },\n          {\n            \"name\": \"Sunrise\",\n            \"value\": moment.unix(item.json.sys.sunrise).add(item.json.timezone, \"s\").format('lll') + \" UTC\" + (item.json.timezone >= 0 ? \"+\" : \"-\") + (item.json.timezone).toString() / 3600 + \"H\",\n            \"inline\": true,\n          }\n        ],\n      },\n    ]\n  };\n  \n  return item;\n})\n\nfunction getFlagEmoji(countryCode) {\n  const codePoints = countryCode\n    .toUpperCase()\n    .split('')\n    .map(char =>  127397 + char.charCodeAt());\n  return String.fromCodePoint(...codePoints);\n}\n\nfunction getCountryName(countryCode){\n  let regionNames = new Intl.DisplayNames([countryCode], {type: 'region'});\n  return regionNames.of(countryCode);  // \"United States\"\n}"
      },
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1520,
        620
      ],
      "id": "ab9c90e3-83f8-4015-b2db-8d28e30929fc"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{$json[\"discord\"]}}"
      },
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1740,
        620
      ],
      "id": "7079eba9-146a-4e5c-8a8e-5458377014a7"
    },
    {
      "parameters": {
        "operation": "multiStep",
        "dataPropertyName": "weather",
        "operations": {
          "operations": [
            {
              "operation": "create",
              "width": 400,
              "height": 200
            },
            {
              "operation": "border",
              "borderWidth": 5,
              "borderHeight": 5,
              "borderColor": "#848383"
            },
            {
              "operation": "composite",
              "dataPropertyNameComposite": "icon",
              "positionX": 10,
              "positionY": 10
            },
            {
              "operation": "text",
              "text": "={{$json[\"main\"][\"temp\"]}}°C",
              "fontSize": 48,
              "positionX": 85,
              "positionY": 75
            },
            {
              "operation": "text",
              "text": "={{$json[\"weather\"][0][\"description\"]}}",
              "positionX": 35,
              "positionY": 105
            },
            {
              "operation": "text",
              "text": "={{$json[\"name\"]}} at {{new Intl.DisplayNames([$json.sys.country], {type: 'region'}).of($json[\"sys\"][\"country\"])}}",
              "fontSize": 10,
              "positionX": "={{400 - ($json[\"name\"] + \" at \" +new Intl.DisplayNames([$json.sys.country], {type: 'region'}).of($json[\"sys\"][\"country\"])).length * 5}}",
              "positionY": 25
            },
            {
              "operation": "text",
              "text": "=Wind: {{$json[\"wind\"][\"speed\"]}} [m/s]",
              "fontSize": 15,
              "positionX": 270
            },
            {
              "operation": "text",
              "text": "=Humidity: {{$json[\"main\"][\"humidity\"]}}%",
              "fontSize": 15,
              "positionX": 270,
              "positionY": 75
            },
            {
              "operation": "text",
              "text": "=Informations from: {{$json[\"additionals\"][\"time\"]}}\nSunset: {{$json[\"additionals\"][\"sunset\"]}}\nSunrise: {{$json[\"additionals\"][\"sunrise\"]}}",
              "fontSize": 15,
              "positionX": 35,
              "positionY": 140
            },
            {
              "operation": "composite",
              "dataPropertyNameComposite": "flag",
              "positionX": "={{400 - 20 - ($json[\"name\"] + \" at \" +new Intl.DisplayNames([$json.sys.country], {type: 'region'}).of($json[\"sys\"][\"country\"])).length * 5}}",
              "positionY": 16
            }
          ]
        },
        "options": {}
      },
      "name": "Edit Image",
      "type": "n8n-nodes-base.editImage",
      "typeVersion": 1,
      "position": [
        1720,
        860
      ],
      "id": "edbc046f-f1cf-4cc8-a7f0-d62e29290c1d"
    },
    {
      "parameters": {
        "url": "=https://openweathermap.org/img/wn/{{$json.weather[0].icon}}@2x.png",
        "responseFormat": "file",
        "dataPropertyName": "icon",
        "options": {}
      },
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1200,
        860
      ],
      "id": "8542b544-1873-4a18-b7dd-ea8a2a7d9c66"
    },
    {
      "parameters": {
        "url": "=https://flagcdn.com/16x12/{{$json[\"sys\"][\"country\"].toLowerCase()}}.png",
        "responseFormat": "file",
        "dataPropertyName": "flag",
        "options": {}
      },
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1360,
        860
      ],
      "id": "8eea7c4b-0425-4cf2-aaff-82feecbe9447"
    },
    {
      "parameters": {
        "functionCode": "const moment = require(\"moment\")\n\nreturn items.map(item => {\n  item.json.additionals = {\n    \"time\": time = moment.unix(item.json.dt).add(item.json.timezone, \"s\").format('lll') + \" UTC\" + (item.json.timezone >= 0 ? \"+\" : \"-\") + (item.json.timezone).toString() / 3600 + \"H\",\n    \"sunset\": moment.unix(item.json.sys.sunset).add(item.json.timezone, \"s\").format('lll') + \" UTC\" + (item.json.timezone >= 0 ? \"+\" : \"-\") + (item.json.timezone).toString() / 3600 + \"H\",\n    \"sunrise\": moment.unix(item.json.sys.sunrise).add(item.json.timezone, \"s\").format('lll') + \" UTC\" + (item.json.timezone >= 0 ? \"+\" : \"-\") + (item.json.timezone).toString() / 3600 + \"H\",\n  }\n\n  return item;\n})"
      },
      "name": "Function1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1560,
        860
      ],
      "id": "7c3e7e5e-b780-4863-91a9-f635c9f506e0"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"Webhook\"].json[\"query\"][\"discord\"] == undefined || $node[\"Webhook\"].json[\"query\"][\"discord\"] == false}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1160,
        640
      ],
      "id": "1d0c3b79-2f8d-4eaa-9168-95775d31a328"
    }
  ],
  "pinData": {},
  "settings": {},
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2023-01-08T21:50:44.000Z",
  "versionId": "0346660c-3901-4eff-b8f3-fed0c5b4068e"
}